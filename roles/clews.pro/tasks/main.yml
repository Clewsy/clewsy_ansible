---
- name: Add user to www-data group.
  user:
    name: "{{ ansible_user }}"
    groups: www-data
    append: yes

- name: Sync clews.pro repo ready for use by docker-compose.
  git:
    repo: "{{ clews_repo }}"
    dest: /home/docker
    accept_hostkey: yes
    key_file: "/home/{{ ansible_user }}/.ssh/id_rsa"
  register: clews_clone
  ignore_errors: True

- name: 'Repo sync error notification.'
  debug: 
    msg: "Did not clone repo.  Possibly already exists with changes."
  when: clews_clone is failed

- name: Determine if data is already present or needs to be restored from backup.
  stat:
    path: /home/docker/.env #.env is gitignored so will not be present on fresh system.
  register: data

- name: Change owner of any files updated from git repo (from root to user).
  file:
    recurse: yes
    path: /home/docker
    state: directory
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
  when: data.stat.exists == false #Only needs fixing if cloned to fresh system as owner will be root.

- name: Sync data from backup if it doesn't exist on host (pull to destination).
  synchronize:
    set_remote_user: no #Use .ssh/config to define user.  Remember, rsync command will be run as root on delegate.
    mode: push  #I.e. localhost or delegate is source.
    rsync_opts: "--update"
    src: "{{ clews_docker_backup_dir }}"  ##Location of docker dir.
    dest: /home/  ##Where to put docker dir.
  delegate_to: "{{ clews_docker_backup_host }}"
  when: data.stat.exists == false #Only needs restoring to fresh system (i.e. .env not present).

- name: Pull docker container images listed in docker.compose.yml.
  docker_compose:
    project_src: /home/docker
    pull: yes
    recreate: smart #Containers will be recreated if a new version is pulled.

- name: Kill openvpn if it is running (will otherwise interfere with running web services).
  command: pkill openvpn #Returns 1 if openvpn not running.
  register: command_result
  failed_when: command_result.rc > 1

- name: Create clews.service unit file.
  get_url:
    url: "{{ clews_unit_file }}"
    dest: /etc/systemd/system/clews.service
    mode: 0644
    owner: root
    group: root

- name: Enable clews.service.
  service:
    name: clews
    enabled: yes

- name: Start clews.service (will spin up containers if not already up).
  service:
    name: clews
    state: started

- name: Create cron job to periodically run docker-compose just in case it is brought down for some reason.
  cron:
    user: "{{ ansible_user }}"
    name: 'Role: "clews.pro" - Periodically run docker-compose to ensure containers are up.'
    minute: "48"
    job: "/usr/bin/docker-compose --env-file /home/docker/.env -f /home/docker/docker-compose.yml up -d"

