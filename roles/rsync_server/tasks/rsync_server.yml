---
- name: '[rsync_server] Load rsync_server variables.'
  include_vars: rsync_server_vars.yml

- name: '[rsync_server] Ensure all packages required for rsync_server are installed.'
  apt:
    name: "{{ rsync_server_packages }}"
    state: latest

- name: '[rsync_server] Determine if the logfile exists.'
  stat:
    path: "{{ rsync_server_logfile }}" #.env is gitignored so will not be present on fresh system.
  register: logfile

- name: '[rsync_server] Ensure logfile exists and is accessible by {{ ansible_user }}'
  file:
    path: "{{ rsync_server_logfile }}"
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: '0644'
    state: touch
  when: logfile.stat.exists == false or logfile.stat.pw_name != ansible_user or logfile.stat.gr_name != ansible_user

- name: '[rsync_server] Configure log rotation for rsync_server logfile ({{ rsync_server_logfile }}).'
  copy:
    content: "{{ rsync_server_logrotate_file }}"
    dest: "/etc/logrotate.d/rsync_server"
    owner: "root"
    group: "root"
    mode: '0644'

- name: '[rsync_server] Create crontab entries for rsync tasks.'
  cron:
    name: 'Role: "rsync_server" - Sync source [{{ item.source }}] to dest [{{ item.dest }}].'
    minute: "{{ item.minute }}"
    hour: "{{ item.hour }}"
    weekday: "{{ item.weekday }}"
    day: "{{ item.day }}"
    month: "{{ item.month }}"
    user: "{{ ansible_user }}"
    job: 'rsync --verbose --archive --delete --acls --human-readable --progress --log-file={{ rsync_server_logfile }} -e "ssh -o StrictHostKeyChecking=no" {{ item.source }} {{ item.dest }}'
  with_items: "{{ rsync_server_syncs }}"
  notify: Restart cron.
